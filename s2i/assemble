#!/bin/bash

set -e

source /usr/libexec/s2i/env

if [ "$DEV_MODE" == true ] ; then
	set -x
fi

echo "---> Installing application source"
cp -Rfp /tmp/src/. ./

if [ ! -z $HTTP_PROXY ]; then
	echo "---> Setting npm http proxy to $HTTP_PROXY"
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
	echo "---> Setting npm http proxy to $http_proxy"
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
	echo "---> Setting npm https proxy to $HTTPS_PROXY"
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
	echo "---> Setting npm https proxy to $https_proxy"
	npm config set https-proxy $https_proxy
fi

# Change the npm registry mirror if provided
if [ ! -z "$NPM_MIRROR" ]; then
	echo "---> Setting the npm package mirror to $NPM_MIRROR"
	npm config set registry $NPM_MIRROR
fi

echo "---> Building your Node application from source"
echo -e "Current git config"
git config --list

if [ ! -z "$YARN_ENABLED" ]; then
	echo "---> Using 'yarn install' with YARN_ARGS"
	npx yarn install $YARN_ARGS
else
	echo "---> Installing dependencies"
	if [ "$DEV_MODE" == true ]; then
		echo "---> Using 'npm install'"
		npm install

		#do not fail when there is no build script
		echo "---> Building in development mode"
		npm run build --if-present
	else
		HAS_BUILD=$(node -e "console.log(require('./package.json').scripts.build ? true : false)")

		# check to see if there is a build script by inspecting the package.json
		if [ "$HAS_BUILD" == true ]; then
			# Do a npm install to get the dev depdencies
			echo "---> Installing dev dependencies"
			NODE_ENV=development npm install
			#do not fail when there is no build script
			echo "---> Building in production mode"
			npm run build --if-present
		else
			echo "---> Using 'npm install -s --only=production'"
			npm install -s --only=production
		fi

		echo "---> Pruning the development dependencies"
		npm prune
	fi
fi

echo "---> Cleaning up npm cache"
rm -rf .npm

echo "---> Fix permissions on app-root"
fix-permissions /opt/app-root
